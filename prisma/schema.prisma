// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        Int    @id @default(autoincrement())
  createdAt DateTime  @default(now())
  name      String
  email     String     @unique
  password  String
  rank      Rank       @default(Beginner)
  materialProgress MaterialProgress[]
  quizProgress     QuizProgress[]
  challengeProgress ChallengeProgress[]
}

model MaterialProgress {
  id         Int      @id @default(autoincrement())
  userId     Int
  user       User     @relation(fields: [userId], references: [id])
  materialId Int
  completed  Boolean
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  @@unique([userId, materialId]) // Compound unique constraint
}

model QuizProgress {
  id         Int      @id @default(autoincrement())
  userId     Int
  user       User     @relation(fields: [userId], references: [id])
  quizId     Int
  score      Int
  completed  Boolean
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([userId, quizId]) // Compound unique constraint

}

model ChallengeProgress {
  id         Int      @id @default(autoincrement())
  userId     Int
  user       User     @relation(fields: [userId], references: [id])
  challengeId Int
  attempts   Int
  completed  Boolean
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([userId, challengeId]) // Compound unique constraint
}

enum Rank {
  Beginner
  Intermediate
  Advanced
  Expert
}